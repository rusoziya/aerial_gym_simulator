Importing module 'gym_38' (/home/ziyar/aerialgym/IsaacGym_Preview_4_Package/isaacgym/python/isaacgym/_bindings/linux-x86_64/gym_38.so)
Setting GYM_USD_PLUG_INFO_PATH to /home/ziyar/aerialgym/IsaacGym_Preview_4_Package/isaacgym/python/isaacgym/_bindings/linux-x86_64/usd/plugInfo.json
[36m[2025-07-02 21:36:38,475][726017] Queried available GPUs: 0
[37m[1m[2025-07-02 21:36:38,475][726017] Environment var CUDA_VISIBLE_DEVICES is 0
PyTorch version 1.13.1
Device count 1
/home/ziyar/aerialgym/IsaacGym_Preview_4_Package/isaacgym/python/isaacgym/_bindings/src/gymtorch
ninja: no work to do.
Warp 1.0.0-beta.5 initialized:
   CUDA Toolkit: 11.5, Driver: 12.4
   Devices:
     "cpu"    | x86_64
     "cuda:0" | NVIDIA GeForce RTX 4080 Laptop GPU (sm_89)
   Kernel cache: /home/ziyar/.cache/warp/1.0.0-beta.5
[SUBPROCESS] Setting headless mode to: True
[SUBPROCESS] Task action_space_dim: 3
[SUBPROCESS] Target Sample Factory action space: 3D
[SUBPROCESS] Setting num_envs to 128 based on env_agents=128
[SUBPROCESS] Set SF_ENV_AGENTS=128 environment variable
[SUBPROCESS] Config batch_size: 8192
[SUBPROCESS] Using MAXIMUM PARALLELIZATION CONFIG (128 environments)
[SUBPROCESS] FORCING headless=True for rollout worker
Registered quad_with_obstacles_gate and dce_navigation_task_gate in subprocess
[isaacgym:gymutil.py] Unknown args:  ['--env=quad_with_obstacles_gate', '--experiment=gate_nav_dual_cam_20250702_213632', '--train_dir=./train_dir', '--num_workers=4', '--num_envs_per_worker=32', '--env_agents=128', '--obs_key=observations', '--batch_size=8192', '--num_batches_to_accumulate=2', '--rollout=32', '--learning_rate=0.0003', '--use_rnn=true', '--rnn_size=128', '--rnn_num_layers=1', '--encoder_mlp_layers', '512', '256', '128', '--gamma=0.98', '--with_wandb=true', '--wandb_project=gate_navigation_dual_camera', '--wandb_user=ziya-ruso-ucl', '--wandb_group=gate_navigation_training', '--wandb_tags', 'aerial_gym', 'gate_navigation', 'dual_camera', 'x500', 'sample_factory', '--save_every_sec=120', '--save_best_every_sec=5', '--train_for_env_steps=100000000']
Not connected to PVD
+++ Using GPU PhysX
Physics Engine: PhysX
Physics Device: cuda:0
GPU Pipeline: enabled
/home/ziyar/miniforge3/envs/aerialgym/lib/python3.8/site-packages/torch/utils/cpp_extension.py:25: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
  from pkg_resources import packaging  # type: ignore[attr-defined]
/home/ziyar/miniforge3/envs/aerialgym/lib/python3.8/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('mpl_toolkits')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
/home/ziyar/miniforge3/envs/aerialgym/lib/python3.8/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('google')`.
Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
  declare_namespace(pkg)
Using /home/ziyar/.cache/torch_extensions/py38_cu117 as PyTorch extensions root...
Emitting ninja build file /home/ziyar/.cache/torch_extensions/py38_cu117/gymtorch/build.ninja...
Building extension module gymtorch...
Allowing ninja to set a default number of workers... (overridable by setting the environment variable MAX_JOBS=N)
Loading extension module gymtorch...
/home/ziyar/miniforge3/envs/aerialgym/lib/python3.8/site-packages/networkx/classes/graph.py:23: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping
/home/ziyar/miniforge3/envs/aerialgym/lib/python3.8/site-packages/networkx/classes/reportviews.py:95: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.10 it will stop working
  from collections import Mapping, Set, Iterable
/home/ziyar/miniforge3/envs/aerialgym/lib/python3.8/site-packages/networkx/readwrite/graphml.py:346: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  (np.int, "int"), (np.int8, "int"),
/home/ziyar/aerialgym/IsaacGym_Preview_4_Package/isaacgym/python/isaacgym/torch_utils.py:135: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  def get_axis_params(value, axis_idx, x_value=0., dtype=np.float, n_dims=3):
[37m[1791 ms][aerial_gym.examples.dce_rl_navigation.dce_navigation_task_gate] - INFO : DCE Gate Navigation Task - Using pre-configured headless: True (dce_navigation_task_gate.py:27)
[37m[1791 ms][aerial_gym.examples.dce_rl_navigation.dce_navigation_task_gate] - INFO : DCE Gate Navigation Task - Final headless mode: True (dce_navigation_task_gate.py:29)
[37m[1791 ms][aerial_gym.examples.dce_rl_navigation.dce_navigation_task_gate] - INFO : Found SF_ENV_AGENTS environment variable: 128 (dce_navigation_task_gate.py:39)
[37m[1791 ms][aerial_gym.examples.dce_rl_navigation.dce_navigation_task_gate] - INFO : Detected env_agents=128 from environment - setting environment count. (dce_navigation_task_gate.py:45)
[37m[1792 ms][base_task] - INFO : Setting seed: 848161752 (base_task.py:38)
[37m[1792 ms][navigation_task_gate] - INFO : Building environment for gate navigation task. (navigation_task_gate.py:48)
[37m[1792 ms][navigation_task_gate] - INFO : Sim Name: base_sim, Env Name: gate_env, Robot Name: x500, Controller Name: lee_position_control (navigation_task_gate.py:49)
[37m[1792 ms][env_manager] - INFO : Populating environments. (env_manager.py:73)
[37m[1792 ms][env_manager] - INFO : Creating simulation instance. (env_manager.py:87)
[37m[1792 ms][env_manager] - INFO : Instantiating IGE object. (env_manager.py:88)
[37m[1792 ms][IsaacGymEnvManager] - INFO : Creating Isaac Gym Environment (IGE_env_manager.py:41)
[37m[1792 ms][IsaacGymEnvManager] - INFO : Acquiring gym object (IGE_env_manager.py:73)
[37m[1792 ms][IsaacGymEnvManager] - INFO : Acquired gym object (IGE_env_manager.py:75)
[37m[1793 ms][IsaacGymEnvManager] - INFO : Fixing devices (IGE_env_manager.py:89)
[37m[1793 ms][IsaacGymEnvManager] - INFO : Using GPU pipeline for simulation. (IGE_env_manager.py:102)
[37m[1793 ms][IsaacGymEnvManager] - INFO : Sim Device type: cuda, Sim Device ID: 0 (IGE_env_manager.py:105)
[31m[1793 ms][IsaacGymEnvManager] - CRITICAL : 
[31m Setting graphics device to -1.
[31m This is done because the simulation is run in headless mode and no Isaac Gym cameras are used.
[31m No need to worry. The simulation and warp rendering will work as expected. (IGE_env_manager.py:112)
[37m[1793 ms][IsaacGymEnvManager] - INFO : Graphics Device ID: -1 (IGE_env_manager.py:119)
[37m[1793 ms][IsaacGymEnvManager] - INFO : Creating Isaac Gym Simulation Object (IGE_env_manager.py:120)
[33m[1793 ms][IsaacGymEnvManager] - WARNING : If you have set the CUDA_VISIBLE_DEVICES environment variable, please ensure that you set it
[33mto a particular one that works for your system to use the viewer or Isaac Gym cameras.
[33mIf you want to run parallel simulations on multiple GPUs with camera sensors,
[33mplease disable Isaac Gym and use warp (by setting use_warp=True), set the viewer to headless. (IGE_env_manager.py:127)
[33m[1793 ms][IsaacGymEnvManager] - WARNING : If you see a segfault in the next lines, it is because of the discrepancy between the CUDA device and the graphics device.
[33mPlease ensure that the CUDA device and the graphics device are the same. (IGE_env_manager.py:132)
[37m[2615 ms][IsaacGymEnvManager] - INFO : Created Isaac Gym Simulation Object (IGE_env_manager.py:136)
[37m[2615 ms][IsaacGymEnvManager] - INFO : Created Isaac Gym Environment (IGE_env_manager.py:43)
[37m[2820 ms][env_manager] - INFO : IGE object instantiated. (env_manager.py:109)
[37m[2820 ms][env_manager] - INFO : Creating warp environment. (env_manager.py:112)
[37m[2820 ms][env_manager] - INFO : Warp environment created. (env_manager.py:114)
[37m[2820 ms][env_manager] - INFO : Creating robot manager. (env_manager.py:118)
[37m[2820 ms][BaseRobot] - INFO : [DONE] Initializing controller (base_robot.py:26)
[37m[2820 ms][BaseRobot] - INFO : Initializing controller lee_position_control (base_robot.py:29)
[33m[2820 ms][base_multirotor] - WARNING : Creating 128 multirotors. (base_multirotor.py:32)
[37m[2820 ms][env_manager] - INFO : [DONE] Creating robot manager. (env_manager.py:123)
[37m[2820 ms][env_manager] - INFO : [DONE] Creating simulation instance. (env_manager.py:125)
[37m[2820 ms][asset_loader] - INFO : Loading asset: model.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2820 ms][asset_loader] - INFO : Loading asset: gate.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2824 ms][asset_loader] - INFO : Loading asset: tree_22.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2833 ms][asset_loader] - INFO : Loading asset: tree_79.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2842 ms][asset_loader] - INFO : Loading asset: tree_37.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2850 ms][asset_loader] - INFO : Loading asset: tree_46.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2860 ms][asset_loader] - INFO : Loading asset: tree_35.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2869 ms][asset_loader] - INFO : Loading asset: left_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2869 ms][asset_loader] - INFO : Loading asset: right_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2870 ms][asset_loader] - INFO : Loading asset: front_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2871 ms][asset_loader] - INFO : Loading asset: back_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2872 ms][asset_loader] - INFO : Loading asset: bottom_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2873 ms][asset_loader] - INFO : Loading asset: tree_1.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2882 ms][asset_loader] - INFO : Loading asset: tree_77.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2891 ms][asset_loader] - INFO : Loading asset: tree_8.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2901 ms][asset_loader] - INFO : Loading asset: tree_21.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2910 ms][asset_loader] - INFO : Loading asset: tree_83.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2919 ms][asset_loader] - INFO : Loading asset: tree_52.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2928 ms][asset_loader] - INFO : Loading asset: tree_55.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2937 ms][asset_loader] - INFO : Loading asset: tree_62.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2946 ms][asset_loader] - INFO : Loading asset: tree_40.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2955 ms][asset_loader] - INFO : Loading asset: tree_31.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2964 ms][asset_loader] - INFO : Loading asset: tree_60.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2973 ms][asset_loader] - INFO : Loading asset: tree_33.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2982 ms][asset_loader] - INFO : Loading asset: tree_73.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[2991 ms][asset_loader] - INFO : Loading asset: tree_96.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3000 ms][asset_loader] - INFO : Loading asset: tree_95.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3009 ms][asset_loader] - INFO : Loading asset: tree_75.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3018 ms][asset_loader] - INFO : Loading asset: tree_58.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3026 ms][asset_loader] - INFO : Loading asset: tree_27.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3035 ms][asset_loader] - INFO : Loading asset: tree_68.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3044 ms][asset_loader] - INFO : Loading asset: tree_59.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3054 ms][asset_loader] - INFO : Loading asset: tree_99.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3063 ms][asset_loader] - INFO : Loading asset: tree_16.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3072 ms][asset_loader] - INFO : Loading asset: tree_84.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3081 ms][asset_loader] - INFO : Loading asset: tree_38.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3090 ms][asset_loader] - INFO : Loading asset: tree_2.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3099 ms][asset_loader] - INFO : Loading asset: tree_19.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3108 ms][asset_loader] - INFO : Loading asset: tree_24.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3117 ms][asset_loader] - INFO : Loading asset: tree_20.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3126 ms][asset_loader] - INFO : Loading asset: tree_61.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3135 ms][asset_loader] - INFO : Loading asset: tree_51.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3144 ms][asset_loader] - INFO : Loading asset: tree_4.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3153 ms][asset_loader] - INFO : Loading asset: tree_85.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3162 ms][asset_loader] - INFO : Loading asset: tree_81.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3171 ms][asset_loader] - INFO : Loading asset: tree_34.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3180 ms][asset_loader] - INFO : Loading asset: tree_43.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3189 ms][asset_loader] - INFO : Loading asset: tree_86.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3198 ms][asset_loader] - INFO : Loading asset: tree_23.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3207 ms][asset_loader] - INFO : Loading asset: tree_93.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3215 ms][asset_loader] - INFO : Loading asset: tree_11.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3225 ms][asset_loader] - INFO : Loading asset: tree_10.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3234 ms][asset_loader] - INFO : Loading asset: tree_63.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3243 ms][asset_loader] - INFO : Loading asset: tree_9.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3252 ms][asset_loader] - INFO : Loading asset: tree_29.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3261 ms][asset_loader] - INFO : Loading asset: tree_76.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3270 ms][asset_loader] - INFO : Loading asset: tree_50.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3279 ms][asset_loader] - INFO : Loading asset: tree_28.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3289 ms][asset_loader] - INFO : Loading asset: tree_36.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3299 ms][asset_loader] - INFO : Loading asset: tree_82.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3308 ms][asset_loader] - INFO : Loading asset: tree_25.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3317 ms][asset_loader] - INFO : Loading asset: tree_89.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3326 ms][asset_loader] - INFO : Loading asset: tree_54.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3377 ms][asset_loader] - INFO : Loading asset: tree_69.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3386 ms][asset_loader] - INFO : Loading asset: tree_44.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3395 ms][asset_loader] - INFO : Loading asset: tree_87.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3404 ms][asset_loader] - INFO : Loading asset: tree_45.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3413 ms][asset_loader] - INFO : Loading asset: tree_12.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3422 ms][asset_loader] - INFO : Loading asset: tree_49.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3431 ms][asset_loader] - INFO : Loading asset: tree_57.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3441 ms][asset_loader] - INFO : Loading asset: tree_53.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3450 ms][asset_loader] - INFO : Loading asset: tree_7.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3459 ms][asset_loader] - INFO : Loading asset: tree_14.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3468 ms][asset_loader] - INFO : Loading asset: tree_98.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3477 ms][asset_loader] - INFO : Loading asset: tree_97.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3486 ms][asset_loader] - INFO : Loading asset: tree_15.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3495 ms][asset_loader] - INFO : Loading asset: tree_71.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3503 ms][asset_loader] - INFO : Loading asset: tree_80.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3512 ms][asset_loader] - INFO : Loading asset: tree_92.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3521 ms][asset_loader] - INFO : Loading asset: tree_3.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3530 ms][asset_loader] - INFO : Loading asset: tree_47.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3539 ms][asset_loader] - INFO : Loading asset: tree_48.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3547 ms][asset_loader] - INFO : Loading asset: tree_6.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3556 ms][asset_loader] - INFO : Loading asset: tree_13.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3565 ms][asset_loader] - INFO : Loading asset: tree_17.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3575 ms][asset_loader] - INFO : Loading asset: tree_90.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3584 ms][asset_loader] - INFO : Loading asset: tree_65.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3593 ms][asset_loader] - INFO : Loading asset: tree_67.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3602 ms][asset_loader] - INFO : Loading asset: tree_32.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3610 ms][asset_loader] - INFO : Loading asset: tree_64.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3619 ms][asset_loader] - INFO : Loading asset: tree_56.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3628 ms][asset_loader] - INFO : Loading asset: tree_26.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3637 ms][asset_loader] - INFO : Loading asset: tree_5.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3647 ms][asset_loader] - INFO : Loading asset: tree_88.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3656 ms][asset_loader] - INFO : Loading asset: tree_41.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3665 ms][asset_loader] - INFO : Loading asset: tree_78.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3673 ms][asset_loader] - INFO : Loading asset: tree_42.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3682 ms][asset_loader] - INFO : Loading asset: tree_30.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3691 ms][asset_loader] - INFO : Loading asset: tree_39.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3700 ms][asset_loader] - INFO : Loading asset: tree_70.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3709 ms][asset_loader] - INFO : Loading asset: tree_74.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3718 ms][asset_loader] - INFO : Loading asset: tree_66.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3728 ms][asset_loader] - INFO : Loading asset: tree_91.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3737 ms][asset_loader] - INFO : Loading asset: tree_94.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3746 ms][asset_loader] - INFO : Loading asset: tree_72.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3755 ms][asset_loader] - INFO : Loading asset: tree_0.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[3767 ms][env_manager] - INFO : Creating ground plane in Isaac Gym Simulation. (env_manager.py:172)
[37m[3767 ms][env_manager] - INFO : [DONE] Creating ground plane in Isaac Gym Simulation (env_manager.py:174)
[37m[3767 ms][env_manager] - INFO : Populating environment 0 (env_manager.py:179)
[33m[4143 ms][robot_manager] - WARNING : 
[33mRobot mass: 1.6060000360012054,
[33mInertia: tensor([[0.0217, 0.0000, 0.0000],
[33m        [0.0000, 0.0217, 0.0000],
[33m        [0.0000, 0.0000, 0.0401]], device='cuda:0'),
[33mRobot COM: tensor([[0., 0., 0., 1.]], device='cuda:0') (robot_manager.py:437)
[33m[4143 ms][robot_manager] - WARNING : Calculated robot mass and inertia for this robot. This code assumes that your robot is the same across environments. (robot_manager.py:440)
[31m[4143 ms][robot_manager] - CRITICAL : If your robot differs across environments you need to perform this computation for each different robot here. (robot_manager.py:443)
*** Can't create empty tensor
[37m[5122 ms][env_manager] - INFO : [DONE] Populating environments. (env_manager.py:75)
[33m[5144 ms][IsaacGymEnvManager] - WARNING : Headless: True (IGE_env_manager.py:424)
[37m[5144 ms][IsaacGymEnvManager] - INFO : Headless mode. Viewer not created. (IGE_env_manager.py:434)
WARNING: allocation matrix is not full rank. Rank: 3
creating render graph
Module warp.utils load on device 'cuda:0' took 1.32 ms
Module aerial_gym.sensors.warp.warp_kernels.warp_camera_kernels load on device 'cuda:0' took 7.66 ms
Module aerial_gym.sensors.warp.warp_kernels.warp_stereo_camera_kernels load on device 'cuda:0' took 11.89 ms
Module aerial_gym.sensors.warp.warp_kernels.warp_lidar_kernels load on device 'cuda:0' took 5.53 ms
finishing capture of render graph
Encoder network initialized.
Defined encoder.
[ImgDecoder] Starting create_model
[ImgDecoder] Done with create_model
Defined decoder.
Loading weights from file:  /home/ziyar/aerialgym/aerialgym_ws/src/aerial_gym_simulator/aerial_gym/utils/vae/weights/ICRA_test_set_more_sim_data_kld_beta_3_LD_64_epoch_49.pth
Encoder network initialized.
Defined encoder.
[ImgDecoder] Starting create_model
[ImgDecoder] Done with create_model
Defined decoder.
Loading weights from file:  /home/ziyar/aerialgym/aerialgym_ws/src/aerial_gym_simulator/aerial_gym/utils/vae/weights/ICRA_test_set_more_sim_data_kld_beta_3_LD_64_epoch_49.pth
[AerialGymVecEnv] Forced action space shape: (3,)
[AerialGymVecEnv] is_multiagent: True, num_agents: 128
[AerialGymVecEnv] Detected observation space: 145D
[AerialGymVecEnv] Using GATE NAVIGATION configuration (145D = 17D basic + 64D drone VAE + 64D static camera VAE)
[make_aerialgym_env] Final action space shape: (3,)
[make_aerialgym_env] Action space: Box(-1.0, 1.0, (3,), float32)
[33m[6876 ms][asset_manager] - WARNING : Number of obstacles to be kept in the environment: 11 (asset_manager.py:32)
/home/ziyar/aerialgym/aerialgym_ws/src/aerial_gym_simulator/aerial_gym/control/motor_model.py:45: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(self.min_thrust, device=self.device, dtype=torch.float32).expand(
/home/ziyar/aerialgym/aerialgym_ws/src/aerial_gym_simulator/aerial_gym/control/motor_model.py:48: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(self.max_thrust, device=self.device, dtype=torch.float32).expand(
[33m[7062 ms][control_allocation] - WARNING : Control allocation does not account for actuator limits. This leads to suboptimal allocation (control_allocation.py:48)
[37m[7062 ms][WarpSensor] - INFO : Camera sensor initialized (warp_sensor.py:50)
[37m[7729 ms][navigation_task_gate] - INFO : Setting up static camera for gate navigation... (navigation_task_gate.py:452)
[37m[7729 ms][navigation_task_gate] - INFO : Static camera properties: 480x270, FOV: 87.0° (navigation_task_gate.py:464)
[37m[7729 ms][navigation_task_gate] - INFO : ✓ Static camera setup complete (navigation_task_gate.py:475)
/home/ziyar/miniforge3/envs/aerialgym/lib/python3.8/site-packages/gymnasium/core.py:311: UserWarning: [33mWARN: env.num_agents to get variables from other wrappers is deprecated and will be removed in v1.0, to get this variable you can do `env.unwrapped.num_agents` for environment variables or `env.get_wrapper_attr('num_agents')` that will search the reminding wrappers.
  logger.warn(
/home/ziyar/miniforge3/envs/aerialgym/lib/python3.8/site-packages/gymnasium/core.py:311: UserWarning: [33mWARN: env.is_multiagent to get variables from other wrappers is deprecated and will be removed in v1.0, to get this variable you can do `env.unwrapped.is_multiagent` for environment variables or `env.get_wrapper_attr('is_multiagent')` that will search the reminding wrappers.
  logger.warn(
[36m[2025-07-02 21:36:46,405][726129] Env info: EnvInfo(obs_space=Dict('obs': Box(-inf, inf, (145,), float32)), action_space=Box(-1.0, 1.0, (3,), float32), num_agents=128, gpu_actions=True, gpu_observations=True, action_splits=None, all_discrete=None, frameskip=1, reward_shaping_scheme=None, env_info_protocol_version=1)
[33m[2025-07-02 21:36:47,140][726017] In serial mode all components run on the same process. Only use async_rl and serial mode together for debugging.
[36m[2025-07-02 21:36:47,140][726017] Starting experiment with the following configuration:
[36mhelp=False
[36malgo=APPO
[36menv=quad_with_obstacles_gate
[36mexperiment=gate_nav_dual_cam_20250702_213632
[36mtrain_dir=./train_dir
[36mrestart_behavior=resume
[36mdevice=gpu
[36mseed=None
[36mnum_policies=1
[36masync_rl=True
[36mserial_mode=True
[36mbatched_sampling=True
[36mnum_batches_to_accumulate=2
[36mworker_num_splits=1
[36mpolicy_workers_per_policy=1
[36mmax_policy_lag=1000
[36mnum_workers=4
[36mnum_envs_per_worker=32
[36mbatch_size=8192
[36mnum_batches_per_epoch=4
[36mnum_epochs=4
[36mrollout=32
[36mrecurrence=32
[36mshuffle_minibatches=False
[36mgamma=0.98
[36mreward_scale=0.1
[36mreward_clip=1000.0
[36mvalue_bootstrap=True
[36mnormalize_returns=True
[36mexploration_loss_coeff=0.001
[36mvalue_loss_coeff=2.0
[36mkl_loss_coeff=0.1
[36mexploration_loss=entropy
[36mgae_lambda=0.95
[36mppo_clip_ratio=0.2
[36mppo_clip_value=1.0
[36mwith_vtrace=False
[36mvtrace_rho=1.0
[36mvtrace_c=1.0
[36moptimizer=adam
[36madam_eps=1e-06
[36madam_beta1=0.9
[36madam_beta2=0.999
[36mmax_grad_norm=1.0
[36mlearning_rate=0.0003
[36mlr_schedule=kl_adaptive_epoch
[36mlr_schedule_kl_threshold=0.016
[36mlr_adaptive_min=1e-06
[36mlr_adaptive_max=0.01
[36mobs_subtract_mean=0.0
[36mobs_scale=1.0
[36mnormalize_input=True
[36mnormalize_input_keys=None
[36mdecorrelate_experience_max_seconds=0
[36mdecorrelate_envs_on_one_worker=True
[36mactor_worker_gpus=[0]
[36mset_workers_cpu_affinity=True
[36mforce_envs_single_thread=False
[36mdefault_niceness=0
[36mlog_to_file=True
[36mexperiment_summaries_interval=10
[36mflush_summaries_interval=30
[36mstats_avg=100
[36msummaries_use_frameskip=True
[36mheartbeat_interval=20
[36mheartbeat_reporting_interval=180
[36mtrain_for_env_steps=100000000
[36mtrain_for_seconds=10000000000
[36msave_every_sec=120
[36mkeep_checkpoints=5
[36mload_checkpoint_kind=latest
[36msave_milestones_sec=-1
[36msave_best_every_sec=5
[36msave_best_metric=reward
[36msave_best_after=100000
[36mbenchmark=False
[36mencoder_mlp_layers=[512, 256, 128]
[36mencoder_conv_architecture=convnet_simple
[36mencoder_conv_mlp_layers=[]
[36muse_rnn=True
[36mrnn_size=128
[36mrnn_type=gru
[36mrnn_num_layers=1
[36mdecoder_mlp_layers=[]
[36mnonlinearity=elu
[36mpolicy_initialization=torch_default
[36mpolicy_init_gain=1.0
[36mactor_critic_share_weights=True
[36madaptive_stddev=True
[36mcontinuous_tanh_scale=0.0
[36minitial_stddev=1.0
[36muse_env_info_cache=False
[36menv_gpu_actions=True
[36menv_gpu_observations=True
[36menv_frameskip=1
[36menv_framestack=1
[36mpixel_format=CHW
[36muse_record_episode_statistics=False
[36mwith_wandb=True
[36mwandb_user=ziya-ruso-ucl
[36mwandb_project=gate_navigation_dual_camera
[36mwandb_group=gate_navigation_training
[36mwandb_job_type=SF
[36mwandb_tags=['aerial_gym', 'gate_navigation', 'dual_camera', 'x500', 'sample_factory']
[36mwith_pbt=False
[36mpbt_mix_policies_in_one_env=True
[36mpbt_period_env_steps=5000000
[36mpbt_start_mutation=20000000
[36mpbt_replace_fraction=0.3
[36mpbt_mutation_rate=0.15
[36mpbt_replace_reward_gap=0.1
[36mpbt_replace_reward_gap_absolute=1e-06
[36mpbt_optimize_gamma=False
[36mpbt_target_objective=true_objective
[36mpbt_perturb_min=1.1
[36mpbt_perturb_max=1.5
[36menv_agents=128
[36mheadless=True
[36mobs_key=observations
[36msubtask=None
[36mige_api_version=preview4
[36meval_stats=False
[36maction_space_dim=3
[36mcommand_line=--env=quad_with_obstacles_gate --experiment=gate_nav_dual_cam_20250702_213632 --headless=true --train_dir=./train_dir --num_workers=4 --num_envs_per_worker=32 --env_agents=128 --obs_key=observations --batch_size=8192 --num_batches_to_accumulate=2 --rollout=32 --learning_rate=0.0003 --use_rnn=true --rnn_size=128 --rnn_num_layers=1 --encoder_mlp_layers 512 256 128 --gamma=0.98 --with_wandb=true --wandb_project=gate_navigation_dual_camera --wandb_user=ziya-ruso-ucl --wandb_group=gate_navigation_training --wandb_tags aerial_gym gate_navigation dual_camera x500 sample_factory --save_every_sec=120 --save_best_every_sec=5 --train_for_env_steps=100000000
[36mcli_args={'env': 'quad_with_obstacles_gate', 'experiment': 'gate_nav_dual_cam_20250702_213632', 'train_dir': './train_dir', 'num_batches_to_accumulate': 2, 'num_workers': 4, 'num_envs_per_worker': 32, 'batch_size': 8192, 'rollout': 32, 'gamma': 0.98, 'learning_rate': 0.0003, 'train_for_env_steps': 100000000, 'save_every_sec': 120, 'save_best_every_sec': 5, 'encoder_mlp_layers': [512, 256, 128], 'use_rnn': True, 'rnn_size': 128, 'rnn_num_layers': 1, 'with_wandb': True, 'wandb_user': 'ziya-ruso-ucl', 'wandb_project': 'gate_navigation_dual_camera', 'wandb_group': 'gate_navigation_training', 'wandb_tags': ['aerial_gym', 'gate_navigation', 'dual_camera', 'x500', 'sample_factory'], 'env_agents': 128, 'headless': True, 'obs_key': 'observations'}
[36mgit_hash=a54f99d681da80aa6215176cae93d2948a30ac42
[36mgit_repo_name=git@github.com:rusoziya/aerial_gym_simulator.git
[36mwandb_unique_id=gate_nav_dual_cam_20250702_213632_20250702_213635_024590
[36m[2025-07-02 21:36:47,140][726017] Saving configuration to ./train_dir/gate_nav_dual_cam_20250702_213632/config.json...
[36m[2025-07-02 21:36:47,180][726017] Using GPUs [0] for process 0 (actually maps to GPUs [0])
[36m[2025-07-02 21:36:47,181][726017] Rollout worker 0 uses device cuda:0
[36m[2025-07-02 21:36:47,181][726017] Using GPUs [0] for process 1 (actually maps to GPUs [0])
[36m[2025-07-02 21:36:47,181][726017] Rollout worker 1 uses device cuda:0
[36m[2025-07-02 21:36:47,181][726017] Using GPUs [0] for process 2 (actually maps to GPUs [0])
[36m[2025-07-02 21:36:47,181][726017] Rollout worker 2 uses device cuda:0
[36m[2025-07-02 21:36:47,181][726017] Using GPUs [0] for process 3 (actually maps to GPUs [0])
[36m[2025-07-02 21:36:47,181][726017] Rollout worker 3 uses device cuda:0
[isaacgym:gymutil.py] Unknown args:  ['--env=quad_with_obstacles_gate', '--experiment=gate_nav_dual_cam_20250702_213632', '--train_dir=./train_dir', '--num_workers=4', '--num_envs_per_worker=32', '--env_agents=128', '--obs_key=observations', '--batch_size=8192', '--num_batches_to_accumulate=2', '--rollout=32', '--learning_rate=0.0003', '--use_rnn=true', '--rnn_size=128', '--rnn_num_layers=1', '--encoder_mlp_layers', '512', '256', '128', '--gamma=0.98', '--with_wandb=true', '--wandb_project=gate_navigation_dual_camera', '--wandb_user=ziya-ruso-ucl', '--wandb_group=gate_navigation_training', '--wandb_tags', 'aerial_gym', 'gate_navigation', 'dual_camera', 'x500', 'sample_factory', '--save_every_sec=120', '--save_best_every_sec=5', '--train_for_env_steps=100000000']
Not connected to PVD
+++ Using GPU PhysX
Physics Engine: PhysX
Physics Device: cuda:0
GPU Pipeline: enabled
[36m[2025-07-02 21:36:47,439][726017] Using GPUs [0] for process 0 (actually maps to GPUs [0])
[37m[1m[2025-07-02 21:36:47,439][726017] InferenceWorker_p0-w0: min num requests: 1
[36m[2025-07-02 21:36:47,440][726017] Using GPUs [0] for process 0 (actually maps to GPUs [0])
[36m[2025-07-02 21:36:47,440][726017] Using GPUs [0] for process 1 (actually maps to GPUs [0])
[36m[2025-07-02 21:36:47,440][726017] Using GPUs [0] for process 2 (actually maps to GPUs [0])
[36m[2025-07-02 21:36:47,440][726017] Using GPUs [0] for process 3 (actually maps to GPUs [0])
[37m[1m[2025-07-02 21:36:47,441][726017] Starting seed is not provided
[36m[2025-07-02 21:36:47,441][726017] Using GPUs [0] for process 0 (actually maps to GPUs [0])
[36m[2025-07-02 21:36:47,441][726017] Initializing actor-critic model on device cuda:0
[36m[2025-07-02 21:36:47,441][726017] RunningMeanStd input shape: (145,)
[36m[2025-07-02 21:36:47,442][726017] RunningMeanStd input shape: (1,)
[36m[2025-07-02 21:36:47,467][726017] Created Actor Critic model with architecture:
[36m[2025-07-02 21:36:47,467][726017] ActorCriticSharedWeights(
[36m  (obs_normalizer): ObservationNormalizer(
[36m    (running_mean_std): RunningMeanStdDictInPlace(
[36m      (running_mean_std): ModuleDict(
[36m        (obs): RunningMeanStdInPlace()
[36m      )
[36m    )
[36m  )
[36m  (returns_normalizer): RecursiveScriptModule(original_name=RunningMeanStdInPlace)
[36m  (encoder): MultiInputEncoder(
[36m    (encoders): ModuleDict(
[36m      (obs): MlpEncoder(
[36m        (mlp_head): RecursiveScriptModule(
[36m          original_name=Sequential
[36m          (0): RecursiveScriptModule(original_name=Linear)
[36m          (1): RecursiveScriptModule(original_name=ELU)
[36m          (2): RecursiveScriptModule(original_name=Linear)
[36m          (3): RecursiveScriptModule(original_name=ELU)
[36m          (4): RecursiveScriptModule(original_name=Linear)
[36m          (5): RecursiveScriptModule(original_name=ELU)
[36m        )
[36m      )
[36m    )
[36m  )
[36m  (core): ModelCoreRNN(
[36m    (core): GRU(128, 128)
[36m  )
[36m  (decoder): MlpDecoder(
[36m    (mlp): Identity()
[36m  )
[36m  (critic_linear): Linear(in_features=128, out_features=1, bias=True)
[36m  (action_parameterization): ActionParameterizationDefault(
[36m    (distribution_linear): Linear(in_features=128, out_features=6, bias=True)
[36m  )
[36m)
[36m[2025-07-02 21:36:47,900][726017] Using optimizer <class 'torch.optim.adam.Adam'>
[33m[2025-07-02 21:36:47,900][726017] No checkpoints found
[36m[2025-07-02 21:36:47,901][726017] Did not load from checkpoint, starting from scratch!
[36m[2025-07-02 21:36:47,901][726017] Initialized policy 0 weights for model version 0
[36m[2025-07-02 21:36:47,901][726017] LearnerWorker_p0 finished initialization!
[36m[2025-07-02 21:36:47,901][726017] Using GPUs [0] for process 0 (actually maps to GPUs [0])
[36m[2025-07-02 21:36:47,919][726017] Fps is (10 sec: nan, 60 sec: nan, 300 sec: nan). Total num frames: 0. Throughput: 0: nan. Samples: 0. Policy #0 lag: (min: -1.0, avg: -1.0, max: -1.0)
[37m[1m[2025-07-02 21:36:47,920][726017] Inference worker 0-0 is ready!
[37m[1m[2025-07-02 21:36:47,920][726017] All inference workers are ready! Signal rollout workers to start!
[36m[2025-07-02 21:36:47,920][726017] EnvRunner 2-0 uses policy 0
[37m[14777 ms][aerial_gym.examples.dce_rl_navigation.dce_navigation_task_gate] - INFO : DCE Gate Navigation Task - Using pre-configured headless: False (dce_navigation_task_gate.py:27)
[37m[14777 ms][aerial_gym.examples.dce_rl_navigation.dce_navigation_task_gate] - INFO : DCE Gate Navigation Task - Final headless mode: False (dce_navigation_task_gate.py:29)
[37m[14777 ms][aerial_gym.examples.dce_rl_navigation.dce_navigation_task_gate] - INFO : Found SF_ENV_AGENTS environment variable: 128 (dce_navigation_task_gate.py:39)
[37m[14777 ms][aerial_gym.examples.dce_rl_navigation.dce_navigation_task_gate] - INFO : Detected env_agents=128 from environment - setting environment count. (dce_navigation_task_gate.py:45)
[37m[14778 ms][base_task] - INFO : Setting seed: 4014275220 (base_task.py:38)
[37m[14778 ms][navigation_task_gate] - INFO : Building environment for gate navigation task. (navigation_task_gate.py:48)
[37m[14778 ms][navigation_task_gate] - INFO : Sim Name: base_sim, Env Name: gate_env, Robot Name: x500, Controller Name: lee_position_control (navigation_task_gate.py:49)
[37m[14778 ms][env_manager] - INFO : Populating environments. (env_manager.py:73)
[37m[14778 ms][env_manager] - INFO : Creating simulation instance. (env_manager.py:87)
[37m[14778 ms][env_manager] - INFO : Instantiating IGE object. (env_manager.py:88)
[37m[14778 ms][IsaacGymEnvManager] - INFO : Creating Isaac Gym Environment (IGE_env_manager.py:41)
[37m[14778 ms][IsaacGymEnvManager] - INFO : Acquiring gym object (IGE_env_manager.py:73)
[37m[14778 ms][IsaacGymEnvManager] - INFO : Acquired gym object (IGE_env_manager.py:75)
[37m[14779 ms][IsaacGymEnvManager] - INFO : Fixing devices (IGE_env_manager.py:89)
[37m[14779 ms][IsaacGymEnvManager] - INFO : Using GPU pipeline for simulation. (IGE_env_manager.py:102)
[37m[14779 ms][IsaacGymEnvManager] - INFO : Sim Device type: cuda, Sim Device ID: 0 (IGE_env_manager.py:105)
[37m[14779 ms][IsaacGymEnvManager] - INFO : Graphics Device ID: 0 (IGE_env_manager.py:119)
[37m[14779 ms][IsaacGymEnvManager] - INFO : Creating Isaac Gym Simulation Object (IGE_env_manager.py:120)
[33m[14780 ms][IsaacGymEnvManager] - WARNING : If you have set the CUDA_VISIBLE_DEVICES environment variable, please ensure that you set it
[33mto a particular one that works for your system to use the viewer or Isaac Gym cameras.
[33mIf you want to run parallel simulations on multiple GPUs with camera sensors,
[33mplease disable Isaac Gym and use warp (by setting use_warp=True), set the viewer to headless. (IGE_env_manager.py:127)
[33m[14780 ms][IsaacGymEnvManager] - WARNING : If you see a segfault in the next lines, it is because of the discrepancy between the CUDA device and the graphics device.
[33mPlease ensure that the CUDA device and the graphics device are the same. (IGE_env_manager.py:132)
[37m[15783 ms][IsaacGymEnvManager] - INFO : Created Isaac Gym Simulation Object (IGE_env_manager.py:136)
[37m[15783 ms][IsaacGymEnvManager] - INFO : Created Isaac Gym Environment (IGE_env_manager.py:43)
[37m[15986 ms][env_manager] - INFO : IGE object instantiated. (env_manager.py:109)
[37m[15986 ms][env_manager] - INFO : Creating warp environment. (env_manager.py:112)
[37m[15986 ms][env_manager] - INFO : Warp environment created. (env_manager.py:114)
[37m[15986 ms][env_manager] - INFO : Creating robot manager. (env_manager.py:118)
[37m[15986 ms][BaseRobot] - INFO : [DONE] Initializing controller (base_robot.py:26)
[37m[15986 ms][BaseRobot] - INFO : Initializing controller lee_position_control (base_robot.py:29)
[33m[15986 ms][base_multirotor] - WARNING : Creating 128 multirotors. (base_multirotor.py:32)
[37m[15986 ms][env_manager] - INFO : [DONE] Creating robot manager. (env_manager.py:123)
[37m[15986 ms][env_manager] - INFO : [DONE] Creating simulation instance. (env_manager.py:125)
[37m[15986 ms][asset_loader] - INFO : Loading asset: model.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[15987 ms][asset_loader] - INFO : Loading asset: gate.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[15991 ms][asset_loader] - INFO : Loading asset: tree_25.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16000 ms][asset_loader] - INFO : Loading asset: tree_16.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16009 ms][asset_loader] - INFO : Loading asset: tree_94.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16018 ms][asset_loader] - INFO : Loading asset: tree_1.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16027 ms][asset_loader] - INFO : Loading asset: tree_28.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16036 ms][asset_loader] - INFO : Loading asset: left_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16037 ms][asset_loader] - INFO : Loading asset: right_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16038 ms][asset_loader] - INFO : Loading asset: front_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16039 ms][asset_loader] - INFO : Loading asset: back_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16040 ms][asset_loader] - INFO : Loading asset: bottom_wall.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16041 ms][asset_loader] - INFO : Loading asset: tree_65.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16049 ms][asset_loader] - INFO : Loading asset: tree_68.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16058 ms][asset_loader] - INFO : Loading asset: tree_71.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16067 ms][asset_loader] - INFO : Loading asset: tree_44.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16075 ms][asset_loader] - INFO : Loading asset: tree_88.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16084 ms][asset_loader] - INFO : Loading asset: tree_60.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16093 ms][asset_loader] - INFO : Loading asset: tree_14.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16102 ms][asset_loader] - INFO : Loading asset: tree_23.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16111 ms][asset_loader] - INFO : Loading asset: tree_86.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16120 ms][asset_loader] - INFO : Loading asset: tree_90.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16129 ms][asset_loader] - INFO : Loading asset: tree_54.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16138 ms][asset_loader] - INFO : Loading asset: tree_98.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16147 ms][asset_loader] - INFO : Loading asset: tree_30.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16155 ms][asset_loader] - INFO : Loading asset: tree_3.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16165 ms][asset_loader] - INFO : Loading asset: tree_70.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16174 ms][asset_loader] - INFO : Loading asset: tree_2.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16183 ms][asset_loader] - INFO : Loading asset: tree_77.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16192 ms][asset_loader] - INFO : Loading asset: tree_84.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16200 ms][asset_loader] - INFO : Loading asset: tree_51.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16209 ms][asset_loader] - INFO : Loading asset: tree_22.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16218 ms][asset_loader] - INFO : Loading asset: tree_69.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16226 ms][asset_loader] - INFO : Loading asset: tree_89.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16235 ms][asset_loader] - INFO : Loading asset: tree_76.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16244 ms][asset_loader] - INFO : Loading asset: tree_85.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16253 ms][asset_loader] - INFO : Loading asset: tree_10.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16261 ms][asset_loader] - INFO : Loading asset: tree_15.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16270 ms][asset_loader] - INFO : Loading asset: tree_74.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16279 ms][asset_loader] - INFO : Loading asset: tree_48.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
*** Can't create empty tensor
[37m[16370 ms][asset_loader] - INFO : Loading asset: tree_43.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16379 ms][asset_loader] - INFO : Loading asset: tree_97.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16388 ms][asset_loader] - INFO : Loading asset: tree_36.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16397 ms][asset_loader] - INFO : Loading asset: tree_35.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16406 ms][asset_loader] - INFO : Loading asset: tree_75.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16414 ms][asset_loader] - INFO : Loading asset: tree_52.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16423 ms][asset_loader] - INFO : Loading asset: tree_13.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16432 ms][asset_loader] - INFO : Loading asset: tree_72.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16441 ms][asset_loader] - INFO : Loading asset: tree_17.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16449 ms][asset_loader] - INFO : Loading asset: tree_38.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16458 ms][asset_loader] - INFO : Loading asset: tree_59.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16467 ms][asset_loader] - INFO : Loading asset: tree_63.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16476 ms][asset_loader] - INFO : Loading asset: tree_57.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16485 ms][asset_loader] - INFO : Loading asset: tree_40.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16494 ms][asset_loader] - INFO : Loading asset: tree_20.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16503 ms][asset_loader] - INFO : Loading asset: tree_56.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16512 ms][asset_loader] - INFO : Loading asset: tree_32.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16521 ms][asset_loader] - INFO : Loading asset: tree_67.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16530 ms][asset_loader] - INFO : Loading asset: tree_62.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16539 ms][asset_loader] - INFO : Loading asset: tree_29.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16547 ms][asset_loader] - INFO : Loading asset: tree_92.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16556 ms][asset_loader] - INFO : Loading asset: tree_53.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16565 ms][asset_loader] - INFO : Loading asset: tree_45.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16573 ms][asset_loader] - INFO : Loading asset: tree_73.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16583 ms][asset_loader] - INFO : Loading asset: tree_11.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16591 ms][asset_loader] - INFO : Loading asset: tree_33.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16600 ms][asset_loader] - INFO : Loading asset: tree_42.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16609 ms][asset_loader] - INFO : Loading asset: tree_95.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16617 ms][asset_loader] - INFO : Loading asset: tree_93.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16626 ms][asset_loader] - INFO : Loading asset: tree_18.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16635 ms][asset_loader] - INFO : Loading asset: tree_83.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16645 ms][asset_loader] - INFO : Loading asset: tree_80.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16653 ms][asset_loader] - INFO : Loading asset: tree_46.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16663 ms][asset_loader] - INFO : Loading asset: tree_34.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16673 ms][asset_loader] - INFO : Loading asset: tree_49.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16682 ms][asset_loader] - INFO : Loading asset: tree_58.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16703 ms][asset_loader] - INFO : Loading asset: tree_47.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16712 ms][asset_loader] - INFO : Loading asset: tree_7.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16720 ms][asset_loader] - INFO : Loading asset: tree_5.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16729 ms][asset_loader] - INFO : Loading asset: tree_21.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16738 ms][asset_loader] - INFO : Loading asset: tree_24.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16747 ms][asset_loader] - INFO : Loading asset: tree_39.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16755 ms][asset_loader] - INFO : Loading asset: tree_41.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16764 ms][asset_loader] - INFO : Loading asset: tree_12.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16773 ms][asset_loader] - INFO : Loading asset: tree_78.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16782 ms][asset_loader] - INFO : Loading asset: tree_9.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16791 ms][asset_loader] - INFO : Loading asset: tree_26.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16800 ms][asset_loader] - INFO : Loading asset: tree_87.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16809 ms][asset_loader] - INFO : Loading asset: tree_6.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16818 ms][asset_loader] - INFO : Loading asset: tree_4.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16827 ms][asset_loader] - INFO : Loading asset: tree_96.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16836 ms][asset_loader] - INFO : Loading asset: tree_66.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16845 ms][asset_loader] - INFO : Loading asset: tree_19.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16853 ms][asset_loader] - INFO : Loading asset: tree_0.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16863 ms][asset_loader] - INFO : Loading asset: tree_91.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16885 ms][asset_loader] - INFO : Loading asset: tree_61.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16894 ms][asset_loader] - INFO : Loading asset: tree_55.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16903 ms][asset_loader] - INFO : Loading asset: tree_79.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16912 ms][asset_loader] - INFO : Loading asset: tree_82.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16920 ms][asset_loader] - INFO : Loading asset: tree_8.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16929 ms][asset_loader] - INFO : Loading asset: tree_31.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16938 ms][asset_loader] - INFO : Loading asset: tree_27.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16947 ms][asset_loader] - INFO : Loading asset: tree_81.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16956 ms][asset_loader] - INFO : Loading asset: tree_37.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16966 ms][asset_loader] - INFO : Loading asset: tree_50.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16975 ms][asset_loader] - INFO : Loading asset: tree_99.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16984 ms][asset_loader] - INFO : Loading asset: tree_64.urdf for the first time. Next use of this asset will be via the asset buffer. (asset_loader.py:71)
[37m[16995 ms][env_manager] - INFO : Creating ground plane in Isaac Gym Simulation. (env_manager.py:172)
[37m[17000 ms][env_manager] - INFO : [DONE] Creating ground plane in Isaac Gym Simulation (env_manager.py:174)
[37m[17000 ms][env_manager] - INFO : Populating environment 0 (env_manager.py:179)
[33m[17017 ms][robot_manager] - WARNING : 
[33mRobot mass: 1.6060000360012054,
[33mInertia: tensor([[0.0217, 0.0000, 0.0000],
[33m        [0.0000, 0.0217, 0.0000],
[33m        [0.0000, 0.0000, 0.0401]], device='cuda:0'),
[33mRobot COM: tensor([[0., 0., 0., 1.]], device='cuda:0') (robot_manager.py:437)
[33m[17017 ms][robot_manager] - WARNING : Calculated robot mass and inertia for this robot. This code assumes that your robot is the same across environments. (robot_manager.py:440)
[31m[17017 ms][robot_manager] - CRITICAL : If your robot differs across environments you need to perform this computation for each different robot here. (robot_manager.py:443)
[37m[18023 ms][env_manager] - INFO : [DONE] Populating environments. (env_manager.py:75)
[33m[18049 ms][IsaacGymEnvManager] - WARNING : Headless: False (IGE_env_manager.py:424)
[37m[18049 ms][IsaacGymEnvManager] - INFO : Creating viewer (IGE_env_manager.py:426)
[33m[18139 ms][IGE_viewer_control] - WARNING : Instructions for using the viewer with the keyboard:
[33mESC: Quit
[33mV: Toggle Viewer Sync
[33mS: Sync Frame Time
[33mF: Toggle Camera Follow
[33mP: Toggle Camera Follow Type
[33mR: Reset All Environments
[33mUP: Switch Target Environment Up
[33mDOWN: Switch Target Environment Down
[33mSPACE: Pause Simulation
[33m (IGE_viewer_control.py:153)
[37m[18139 ms][IsaacGymEnvManager] - INFO : Created viewer (IGE_env_manager.py:432)
WARNING: allocation matrix is not full rank. Rank: 3
[33m[19859 ms][asset_manager] - WARNING : Number of obstacles to be kept in the environment: 11 (asset_manager.py:32)
/home/ziyar/aerialgym/aerialgym_ws/src/aerial_gym_simulator/aerial_gym/control/motor_model.py:45: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(self.min_thrust, device=self.device, dtype=torch.float32).expand(
/home/ziyar/aerialgym/aerialgym_ws/src/aerial_gym_simulator/aerial_gym/control/motor_model.py:48: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(self.max_thrust, device=self.device, dtype=torch.float32).expand(
[33m[20047 ms][control_allocation] - WARNING : Control allocation does not account for actuator limits. This leads to suboptimal allocation (control_allocation.py:48)
